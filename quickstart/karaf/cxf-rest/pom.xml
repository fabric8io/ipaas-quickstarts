<?xml version="1.0" encoding="UTF-8"?>
<!--

     Copyright 2005-2015 Red Hat, Inc.

     Red Hat licenses this file to you under the Apache License, version
     2.0 (the "License"); you may not use this file except in compliance
     with the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
     implied.  See the License for the specific language governing
     permissions and limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>io.fabric8.quickstarts</groupId>
    <artifactId>quickstart-karaf</artifactId>
    <version>2.2.60-SNAPSHOT</version>
  </parent>

  <artifactId>quickstart-karaf-cxf-rest</artifactId>
  <packaging>bundle</packaging>
  <name>Fabric8 :: Quickstarts :: Karaf :: CXF REST</name>
  <description>REST example using CXF in Karaf container</description>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <version.maven-bundle-plugin>2.3.7</version.maven-bundle-plugin>

    <!-- versions for use in mvn plugins as we cannot inherit them from a BOM -->
    <fabric8.version>2.2.56</fabric8.version>
    <docker.maven.plugin.version>0.13.6</docker.maven.plugin.version>

    <cxf.version>3.0.4.redhat-621070</cxf.version>
    <cxf.plugin.version>3.0.4.redhat-621070</cxf.plugin.version>
    <fuse.version>6.2.1.redhat-070</fuse.version>
    <karaf.version>2.4.0.redhat-621070</karaf.version>
    <karaf.plugin.version>4.0.2.redhat-621054</karaf.plugin.version>

    <jackson2-version>2.6.3</jackson2-version>
    <swagger-version>1.5.4</swagger-version>
    <validation-api-version>1.1.0.Final</validation-api-version>
    <commons-lang3-version>3.4</commons-lang3-version>
    <google-guava-version>18.0</google-guava-version>
    <json4s-version>3.2.4_1</json4s-version>
    <jsr311-api-version>1.1.1</jsr311-api-version>
    <reflections-version>0.9.10_3</reflections-version>
    <jackson-module-scala-version>2.1.5_2</jackson-module-scala-version>
    <swagger-scala-version>2.10.2</swagger-scala-version>
    <javassist-version>3.19.0-GA</javassist-version>

    <docker.from>fabric8/s2i-karaf-rhel:1.1.6</docker.from>
    <fabric8.dockerUser>fabric8/</fabric8.dockerUser>
    <docker.image>${fabric8.dockerUser}${project.artifactId}:${project.version}</docker.image>
    <docker.assemblyDescriptor>${basedir}/src/main/fabric8/assembly.xml</docker.assemblyDescriptor>
    <docker.port.container.jolokia>8778</docker.port.container.jolokia>
    <docker.port.container.http>8181</docker.port.container.http>

    <fabric8.service.name>quickstart-cxf-rest</fabric8.service.name>
    <fabric8.service.port>9412</fabric8.service.port>
    <fabric8.service.containerPort>8181</fabric8.service.containerPort>

    <!-- fabric8.env.AB_JOLOKIA_AUTH_OPENSHIFT>true</fabric8.env.AB_JOLOKIA_AUTH_OPENSHIFT -->
    <fabric8.label.component>${project.artifactId}</fabric8.label.component>
    <fabric8.label.container>karaf</fabric8.label.container>
    <fabric8.label.group>quickstarts</fabric8.label.group>
    <fabric8.iconRef>karaf</fabric8.iconRef>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>io.fabric8</groupId>
        <artifactId>fabric8-project</artifactId>
        <version>${fabric8.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>

    <!-- cxf -->
    <dependency>
      <groupId>org.apache.cxf</groupId>
      <artifactId>cxf-core</artifactId>
      <version>${cxf.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.cxf</groupId>
      <artifactId>cxf-rt-transports-http</artifactId>
      <version>${cxf.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.cxf</groupId>
      <artifactId>cxf-rt-frontend-jaxrs</artifactId>
      <version>${cxf.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.cxf</groupId>
      <artifactId>cxf-rt-rs-service-description</artifactId>
      <version>${cxf.version}</version>
    </dependency>

    <!-- swagger -->
    <dependency>
      <groupId>io.swagger</groupId>
      <artifactId>swagger-jaxrs</artifactId>
      <optional>true</optional>
      <exclusions>
        <!-- avoid this old dependency which breaks CXF -->
        <exclusion>
          <groupId>javax.ws.rs</groupId>
          <artifactId>jsr311-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- jackson needed for swagger -->
    <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-core</artifactId>
    </dependency>
    <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-annotations</artifactId>
    </dependency>
    <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-databind</artifactId>
    </dependency>
    <dependency>
        <groupId>com.fasterxml.jackson.module</groupId>
        <artifactId>jackson-module-jaxb-annotations</artifactId>
    </dependency>

    <!-- Karaf microcontainer dependencies -->
    <dependency>
      <!-- scope is compile so all features (there is only one) are installed into startup.properties,
      and the feature repo itself is not added in etc/org.apache.karaf.features.cfg file -->
      <groupId>org.jboss.fuse</groupId>
      <artifactId>fuse-karaf-framework</artifactId>
      <version>${fuse.version}</version>
      <type>kar</type>
    </dependency>
    <dependency>
      <groupId>org.apache.cxf.karaf</groupId>
      <artifactId>apache-cxf</artifactId>
      <version>${cxf.version}</version>
      <classifier>features</classifier>
      <type>xml</type>
    </dependency>

  </dependencies>

  <build>
    <finalName>${project.artifactId}</finalName>

    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>

    <plugins>
      <!-- Compiler plugin enforces Java 1.7 compatibility and activates annotation processors -->
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.3</version>
        <configuration>
          <source>1.7</source>
          <target>1.7</target>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.18.1</version>
      </plugin>

      <!-- Need to setup the OSGi meta information here -->
      <plugin>
        <groupId>org.apache.felix</groupId>
        <artifactId>maven-bundle-plugin</artifactId>
        <version>${version.maven-bundle-plugin}</version>
        <extensions>true</extensions>
        <configuration>
          <instructions>
            <Import-Package>
              javax.ws.rs;version="[2,3)",
              javax.ws.rs.core;version="[2,3)",
              javax.ws.rs.ext;version="[2,3)",
              javax.xml.bind.annotation,
              org.osgi.service.blueprint,
              io.swagger.jaxrs.config,
              io.swagger.jaxrs.listing,
              io.swagger.annotations,
              org.apache.cxf.transport.http,
              io.fabric8.cxf.endpoint,
              com.fasterxml.jackson.annotation,
              com.fasterxml.jackson.core,
              com.fasterxml.jackson.databind,
              com.fasterxml.jackson.jaxrs.json,
              *
            </Import-Package>
            <Export-Package>
              io.fabric8.quickstarts.rest
            </Export-Package>
          </instructions>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.cxf</groupId>
        <artifactId>cxf-java2wadl-plugin</artifactId>
        <version>${cxf.plugin.version}</version>
        <executions>
          <execution>
            <id>parsejavadoc</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>parsejavadoc</goal>
            </goals>
          </execution>
          <execution>
            <id>process-classes</id>
            <phase>process-classes</phase>
            <goals>
              <goal>java2wadl</goal>
            </goals>
            <configuration>
              <classResourceNames>
                <classResourceName>io.fabric8.quickstarts.rest.CustomerService</classResourceName>
              </classResourceNames>
              <docProvider>org.apache.cxf.maven_plugin.javatowadl.ResourceMapJavaDocProvider</docProvider>
              <attachWadl>false</attachWadl>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>fabric8-cxf-plugins</artifactId>
        <version>${fabric8.version}</version>
        <executions>
          <execution>
            <id>process-classes</id>
            <phase>process-classes</phase>
            <goals>
              <goal>java2swagger</goal>
            </goals>
            <configuration>
              <classResourceNames>
                <classResourceName>io.fabric8.quickstarts.rest.CustomerService</classResourceName>
              </classResourceNames>
              <attachSwagger>false</attachSwagger>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>fabric8-maven-plugin</artifactId>
        <version>${fabric8.version}</version>
        <executions>
          <execution>
            <id>json</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>json</goal>
            </goals>
          </execution>
          <execution>
            <id>attach</id>
            <phase>package</phase>
            <goals>
              <goal>attach</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- attach feature file to install for karaf assembly -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>1.9.1</version>
        <executions>
          <execution>
            <id>attach-artifacts</id>
            <phase>package</phase>
            <goals>
              <goal>attach-artifact</goal>
            </goals>
            <configuration>
              <artifacts>
                <artifact>
                  <file>${project.build.outputDirectory}/features.xml</file>
                  <classifier>features</classifier>
                  <type>xml</type>
                </artifact>
              </artifacts>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- plugin goals have to be executed in order -->
      <!-- 1. install the bundle and features file -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-install-plugin</artifactId>
        <version>2.5.2</version>
        <executions>
          <execution>
            <id>install-artifacts</id>
            <goals>
              <goal>install</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- 2. create karaf assembly -->
      <!-- karaf-maven-plugin creates custom microservice distribution -->
      <plugin>
        <groupId>org.apache.karaf.tooling</groupId>
        <artifactId>karaf-maven-plugin</artifactId>
        <version>${karaf.plugin.version}</version>
        <extensions>true</extensions>
        <executions>
          <execution>
            <id>karaf-assembly</id>
            <goals>
              <goal>assembly</goal>
            </goals>
            <phase>install</phase>
          </execution>
          <execution>
            <id>karaf-archive</id>
            <goals>
              <goal>archive</goal>
            </goals>
            <phase>install</phase>
          </execution>
        </executions>
        <configuration>
          <!-- we are using karaf 2.4.x -->
          <karafVersion>v24</karafVersion>
          <useReferenceUrls>true</useReferenceUrls>
          <!-- do not include build output directory -->
          <includeBuildOutputDirectory>false</includeBuildOutputDirectory>
          <startupRepositories>
            <repo>mvn:${project.groupId}/${project.artifactId}/${project.version}/xml/features</repo>
          </startupRepositories>
          <!-- no startupFeatures -->
          <startupFeatures>
            <feature>karaf-framework</feature>
            <feature>jaas</feature>
            <feature>shell</feature>
            <feature>aries-blueprint</feature>

            <feature>cxf-core</feature>
            <feature>cxf-jaxrs</feature>
            <feature>cxf-http-jetty</feature>

            <!-- swagger -->
            <feature>http</feature>
            <feature>cxf-specs</feature>
            <feature>swagger2</feature>
          </startupFeatures>
          <startupBundles>
            <bundle>mvn:io.fabric8/fabric8-cxf/${fabric8.version}</bundle>
            <bundle>mvn:${project.groupId}/${project.artifactId}/${project.version}</bundle>
          </startupBundles>
        </configuration>
      </plugin>

      <!-- 3. create docker image -->
      <plugin>
        <groupId>org.jolokia</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>${docker.maven.plugin.version}</version>
        <configuration>
          <images>
            <image>
              <name>${docker.image}</name>
              <build>
                <from>${docker.from}</from>
                <assembly>
                  <basedir>/deployments</basedir>
                  <user>jboss:jboss:jboss</user>
                  <inline xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2"
                          xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2 http://maven.apache.org/xsd/assembly-1.1.2.xsd">
                    <id>${project.artifactId}</id>
                    <files>
                      <!-- copy karaf archive -->
                      <file>
                        <source>${project.build.directory}/${project.artifactId}-${project.version}.tar.gz</source>
                        <outputDirectory>/</outputDirectory>
                      </file>
                    </files>
                  </inline>
                </assembly>
                <cmd>
                  <shell>/deployments/deploy-and-run.sh</shell>
                </cmd>
              </build>
            </image>
          </images>
        </configuration>
      </plugin>

    </plugins>
  </build>

    <!--
  Default sample commands:

  mvn -Pf8-build         ... build Docker images and create OpenShift deployment configs
  mvn -Pf8-deploy        ... f8-build + push to Docker registry + applying deployment config to OpenShift
  mvn -Pf8-local-deploy ... deployment for a single node setup without pushing to a registry

  For individual goal usage please consult the fabric8 documentation
  -->
  <profiles>
    <profile>
      <id>f8-build</id>
      <build>
        <defaultGoal>clean install docker:build fabric8:json</defaultGoal>
      </build>
    </profile>
    <profile>
      <id>f8-deploy</id>
      <properties>
        <fabric8.imagePullPolicySnapshot>Always</fabric8.imagePullPolicySnapshot>
        <fabric8.recreate>true</fabric8.recreate>
      </properties>
      <build>
        <defaultGoal>clean install docker:build docker:push fabric8:json fabric8:apply</defaultGoal>
      </build>
    </profile>
    <profile>
      <id>f8-local-deploy</id>
      <properties>
        <fabric8.recreate>true</fabric8.recreate>
      </properties>
      <build>
        <defaultGoal>clean install docker:build fabric8:json fabric8:apply</defaultGoal>
      </build>
    </profile>
  </profiles>

</project>
